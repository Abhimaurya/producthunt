{"version":3,"sources":["container/Footer/footer.js","container/Header/header.js","container/productView/product.js","container/index.js","App.js","serviceWorker.js","index.js"],"names":["Footer","props","Fragment","class","Header","ProductView","sendback","console","log","state","visible","setState","onChange","date","stateupdate","datestr","formatdate","Date","month","getMonth","day","getDate","year","getFullYear","length","d","join","fetchupdateimage","chngcolor","position","noimage","Likedproduct","makers","image_url","LikedProduct","push","active","mycolor","isLoading","image","bgColor","dateupdate","particualrDateimage","greaterdate","this","fetchimage","todaydate","toISOString","slice","fetch","then","response","json","data","posts","t","onClick","value","className","map","index","array","href","discussion_url","src","style","backgroundColor","Component","ProductHunt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e1c3801.chunk.js","sourcesContent":["import React from 'react';\r\nconst Footer =(props) =>{\r\n    return(\r\n        <React.Fragment>\r\n        <div class=\"Footer\">\r\n        <p>Copyright @ 2019</p>\r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nconst Header =(props) =>{\r\n    return(\r\n        <React.Fragment>\r\n        <div class=\"header\">\r\n            {/* Title */}\r\n         <div class=\"nav\">\r\n            Product Hunt\r\n\r\n         </div>\r\n         {/* Sample view of Login and Enroll button */}\r\n         <div class=\"login\">\r\n             <button class=\"btn\">Login</button>\r\n             <button class=\"btn\">Enroll</button>\r\n\r\n         </div>\r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport Calendar from 'react-calendar';\r\nclass ProductView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //Initialise the state -->\r\n        this.state = {\r\n            visible: false,\r\n            isLoading: true,\r\n            image: [],\r\n            bgColor: \"white\",\r\n            date: new Date(),\r\n            dateupdate: \"\",\r\n            stateupdate: true,\r\n            particualrDateimage: [],\r\n            active: null,\r\n            LikedProduct: [],\r\n            noimage:false,\r\n            greaterdate:false,\r\n\r\n        }\r\n\r\n    }\r\n    //Life cycle call to fetch API-->\r\n    componentDidMount() {\r\n        //to fetch current date API to render on screen\r\n        this.fetchimage(); \r\n        //to fecth passed date API to render on screen\r\n        this.fetchupdateimage();\r\n    }\r\n    //for fetching image API on load render\r\n    fetchimage() {\r\n        //formatting into today date-->\r\n        let todaydate=this.state.date.toISOString().slice(0,10)\r\n        //fetch api with today date-->\r\n        fetch('https://api.producthunt.com/v1/posts?day='+todaydate+'&access_token=ec6K_AQNMuru2NyK819R1M3DEsLwKUGR4S87Wphusp0')\r\n            .then(response => response.json())\r\n            .then(data =>\r\n\r\n                this.setState({\r\n                    greaterdate: true,\r\n                    image: data.posts,\r\n\r\n                })\r\n\r\n            )\r\n    }\r\n    //for fetching image API on date selected product render\r\n    fetchupdateimage(d) {\r\n        console.log(\"before1\", d);\r\n        var t = 'https://api.producthunt.com/v1/posts?day=' + d + '&access_token=ec6K_AQNMuru2NyK819R1M3DEsLwKUGR4S87Wphusp0'\r\n        fetch('https://api.producthunt.com/v1/posts?day=' + d + '&access_token=ec6K_AQNMuru2NyK819R1M3DEsLwKUGR4S87Wphusp0')\r\n            .then(response => response.json())\r\n            .then(data =>\r\n\r\n                this.setState({\r\n                    isLoading: false,\r\n                    particualrDateimage: data.posts,\r\n\r\n                })\r\n\r\n            )\r\n        console.log(\"before2\", t);\r\n    }\r\n    //checking to visble calender or not\r\n    sendback = () => {\r\n        console.log(\"state\", this.state.visible)\r\n        if (!this.state.visible)\r\n            this.setState({\r\n                visible: true,\r\n            })\r\n        else\r\n            this.setState({\r\n                visible: false,\r\n            })\r\n\r\n    }\r\n    //selecting date and passing to method for API call-->\r\n    onChange = date => {\r\n        this.setState({ stateupdate: false, date: date }, () => {\r\n            let datestr = this.state.date;\r\n            //format date as we are getting different format of date-->\r\n            var formatdate = new Date(datestr),\r\n                month = '' + (formatdate.getMonth() + 1),\r\n                day = '' + formatdate.getDate(),\r\n                year = formatdate.getFullYear();\r\n\r\n            if (month.length < 2)\r\n                month = '0' + month;\r\n            if (day.length < 2)\r\n                day = '0' + day;\r\n\r\n            let d = [year, month, day].join('-');\r\n            console.log(\"date\", d);\r\n            //called function and pass parameter of formatted date-->\r\n            \r\n            this.fetchupdateimage(d);\r\n        });\r\n    }\r\n    //Change color of like button toggle movement-->\r\n    chngcolor = (position, d) => {\r\n        this.setState({\r\n            noimage: true\r\n        })\r\n        console.log(\"immediate\",d);\r\n        //store in variable array for further rendering in liked product-->\r\n        let Likedproduct = d.makers[0] ?\r\n            d.makers[0].image_url['original'] :\r\n            \"https://ph-avatars.imgix.net/566629/original?auto=format&fit=crop&crop=faces&w=original&h=original)\";\r\n        //pushing into array-->\r\n        this.state.LikedProduct.push(Likedproduct);\r\n        console.log(\"afterpush\", this.state.LikedProduct);\r\n        //checking for current statu sof button-->\r\n        if (this.state.active === position) {\r\n            this.setState({ active: null })\r\n        } else {\r\n            this.setState({ active: position })\r\n        }\r\n    }\r\n    //changing button color-->\r\n    mycolor = (position) => {\r\n        if (this.state.active === position) {\r\n            return \"#c9cf78\";\r\n        }\r\n        return \"\";\r\n    }\r\n   \r\n    //rendering part start-->\r\n    render() {\r\n        // console.log(\"current date\",this.state.date.toISOString().slice(0,10)<);\r\n        console.log('image', this.state.image);\r\n        console.log(\"particularimage\", this.state.particualrDateimage);\r\n        return (\r\n\r\n            <React.Fragment>\r\n                <div class=\"wrap\">\r\n                    <div class=\"date-picker\">\r\n                        <button class=\"btn\" onClick={this.sendback}>Filter Post via Date</button>\r\n\r\n                        <div class=\"date-detector\">\r\n                            {!this.state.visible ?\r\n                                <p>Please click above button to filter via date</p> :\r\n                                //calender component of React called here-->\r\n                                <Calendar\r\n                                    onChange={this.onChange}\r\n                                    value={this.state.date}\r\n                                />}\r\n                        </div>\r\n                    </div>\r\n                      {/* Initial checking for rendering the product  */}\r\n                    {this.state.isLoading ?\r\n                        <div className=\"loading\">Loading...</div> :\r\n                        <div className=\"product\">\r\n                        {/*if loading gets false it will render this section  */}\r\n                            {this.state.stateupdate ?\r\n                                this.state.image.map((image, index, array) => (\r\n                                    <div>\r\n                                        <a href={image.discussion_url}>\r\n                                            {/* Checking for the whether the image array available or not */}\r\n                                            <img src={image.makers[0] ?\r\n                                                image.makers[0].image_url['original'] :\r\n                                                'https://ph-avatars.imgix.net/566629/original?auto=format&fit=crop&crop=faces&w=original&h=original'}>\r\n                                            </img>\r\n                                        </a>\r\n                                        {/* change color trigger goes jere */}\r\n                                        <p onClick={() => { this.chngcolor(index, image) }} style={{ backgroundColor: this.mycolor(index) }}>Like</p>\r\n                                    </div>\r\n                                )) :\r\n                                // Rendering for the product on chnage of date by selecting via calender\r\n                                this.state.greaterdate?\r\n                                this.state.particualrDateimage.map((image, index, array) => (\r\n                                    <div>\r\n                                        {/* checking for iage is available or not */}\r\n                                        <a href={image.discussion_url}>\r\n                                        <img src={image.makers[0] ?\r\n                                            image.makers[0].image_url['original'] :\r\n                                            'https://ph-avatars.imgix.net/566629/original?auto=format&fit=crop&crop=faces&w=original&h=original'}>\r\n                                        </img>\r\n                                        </a>\r\n                                        {/* change of button color */}\r\n                                        <p onClick={() => { this.chngcolor(index, image) }} style={{ backgroundColor: this.mycolor(index)}}>Like</p>\r\n                                    </div>\r\n                                ))\r\n                                :\r\n                                <div>not render</div>\r\n\r\n                            }\r\n                        </div>\r\n                    }\r\n                    {/* Like section -Product liked by person */}\r\n                    <div class=\"likesection\">\r\n                        <p>Liked product by user</p>\r\n                        <React.Fragment>\r\n                            {/* checking if no like has been done */}\r\n                            {this.state.noimage?\r\n                            this.state.LikedProduct.map((LikedProduct, index, array) => (\r\n                                <div>\r\n                                    {/* rendering of image when user like the product */}\r\n                                    <img className=\"zoom\" src={LikedProduct}\r\n                                    >\r\n                                </img>\r\n                                </div>\r\n\r\n                            )):\r\n                            // when no like has been done by user-->\r\n                            <div className=\"noproduct\">Give a like to see here !</div>}\r\n\r\n                        </React.Fragment>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductView;","import Footer from './Footer/footer'\r\nimport Header  from './Header/header'\r\nimport ProductView from './productView/product'\r\nimport React, { Component } from 'react';\r\n\r\nclass ProductHunt extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            visible:false,\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                {/* Header section */}\r\n                <Header/>\r\n                {/* Product view section */}\r\n                <ProductView />\r\n                {/* Footer section */}\r\n                <Footer/>\r\n            </React.Fragment>\r\n        \r\n         ) }\r\n}\r\n\r\nexport default ProductHunt;","import React from 'react';\nimport ProductHunt from \"./container/index\"\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ProductHunt/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}